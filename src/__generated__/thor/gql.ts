/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment ProductGridTile on Product {\n    id\n    name\n    slug\n    heroVariant {\n      image {\n        src\n      }\n    }\n    priceRange {\n      minPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n        discountedPrice {\n          value {\n            centAmount\n            fractionDigits\n            currencyCode\n          }\n          discount {\n            value {\n              ... on ProductDiscountRelativeValue {\n                factor\n              }\n              ... on ProductDiscountAbsoluteValue {\n                value {\n                  centAmount\n                  currencyCode\n                  fractionDigits\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.ProductGridTileFragmentDoc,
    "\n  fragment CartLineItem on CartLineItem {\n    id\n    ...EditItemQuantityButton\n    taxBehavior\n    variantName\n    productName\n    quantity\n    productSlug\n    variant {\n      image {\n        src\n      }\n      selectedAttributes {\n        value\n      }\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n    unitPrice {\n      value {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      discountedPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n    }\n    discountApplications {\n      edges {\n        node {\n          label\n          discountedAmount {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n      }\n    }\n    total {\n      centAmount\n      currencyCode\n      fractionDigits\n    }\n  }\n": typeof types.CartLineItemFragmentDoc,
    "\n  fragment EditItemQuantityButton on CartLineItem {\n    id\n    quantity\n    variant {\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n  }\n": typeof types.EditItemQuantityButtonFragmentDoc,
    "\n  mutation CartCreate($input: CartCreateInput!) {\n    cartCreate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": typeof types.CartCreateDocument,
    "\n  mutation CartUpdate($input: CartUpdateInput!) {\n    cartUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": typeof types.CartUpdateDocument,
    "\n  mutation CartReplicate($input: CartReplicateInput!) {\n    cartReplicate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": typeof types.CartReplicateDocument,
    "\n  mutation CartDiscountCodeAdd($input: CartDiscountCodeAddInput!) {\n    cartDiscountCodeAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        code: __typename\n      }\n    }\n  }\n": typeof types.CartDiscountCodeAddDocument,
    "\n  mutation CartDiscountCodeRemove($input: CartDiscountCodeRemoveInput!) {\n    cartDiscountCodeRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": typeof types.CartDiscountCodeRemoveDocument,
    "\n  mutation CartLineItemsUpdate($input: CartLineItemsUpdateInput!) {\n    cartLineItemsUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": typeof types.CartLineItemsUpdateDocument,
    "\n  mutation CartLineItemsRemove($input: CartLineItemsRemoveInput!) {\n    cartLineItemsRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": typeof types.CartLineItemsRemoveDocument,
    "\n  query NavbarCart($id: ID!) {\n    cart(id: $id) {\n      id\n      lineItemsQuantity\n      state\n      currency\n      customerId\n      channel {\n        id\n      }\n    }\n  }\n": typeof types.NavbarCartDocument,
    "\n  query CartDetails($id: ID!) {\n    cart(id: $id) {\n      id\n      customerId\n      shippingAddress {\n        countryCode\n      }\n      lineItemsQuantity\n      lineItems(first: 100) {\n        edges {\n          node {\n            id\n            ...CartLineItem\n\n            discountApplications {\n              edges {\n                node {\n                  discountedAmount {\n                    centAmount\n                    currencyCode\n                    fractionDigits\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      discountCodes {\n        code\n      }\n      subtotal {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      taxedPrice {\n        tax {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n      total {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n    }\n  }\n": typeof types.CartDetailsDocument,
    "\n  query CartCustomerDetails {\n    customer {\n      id\n      customerGroups {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.CartCustomerDetailsDocument,
    "\n  query CategoryGrid(\n    $slug: String!\n    $currency: String!\n    $channelId: ID!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductCategorySortKeys!\n  ) {\n    category(slug: $slug, currency: $currency, channelId: $channelId) {\n      products(\n        first: 15\n        after: $after\n        sortDirection: $sortDirection\n        sortKey: $sortKey\n      ) {\n        edges {\n          node {\n            id\n            ...ProductGridTile\n          }\n        }\n      }\n    }\n  }\n": typeof types.CategoryGridDocument,
    "\n  mutation CartLineItemsAdd($input: CartLineItemsAddInput!) {\n    cartLineItemsAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        __typename\n      }\n    }\n  }\n": typeof types.CartLineItemsAddDocument,
    "\n  query ProductsGrid(\n    $channelId: ID!\n    $currency: String!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductSortKeys!\n  ) {\n    products(\n      first: 15\n      after: $after\n      sortDirection: $sortDirection\n      sortKey: $sortKey\n      channelId: $channelId\n      currency: $currency\n    ) {\n      edges {\n        node {\n          id\n          ...ProductGridTile\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": typeof types.ProductsGridDocument,
    "\n  query ProductDetail($slug: String, $currency: String!, $channelId: ID!) {\n    product(slug: $slug, channelId: $channelId, currency: $currency) {\n      id\n      name\n      description\n      attributeAssignments {\n        name\n        attribute {\n          type\n        }\n        values {\n          edges {\n            node {\n              value\n              ... on SwatchAttributeValue {\n                media {\n                  src\n                }\n                color\n              }\n            }\n          }\n        }\n      }\n      variants(first: 100) {\n        edges {\n          node {\n            id\n            sku\n            selectedAttributes {\n              name\n              value\n            }\n            availability {\n              availableForPurchase\n              availableQuantity\n              stockPolicy\n            }\n            price {\n              value {\n                centAmount\n                currencyCode\n                fractionDigits\n              }\n              discountedPrice {\n                value {\n                  centAmount\n                  fractionDigits\n                  currencyCode\n                }\n                discount {\n                  value {\n                    __typename\n                    ... on ProductDiscountRelativeValue {\n                      factor\n                    }\n                    ... on ProductDiscountAbsoluteValue {\n                      value {\n                        centAmount\n                        currencyCode\n                        fractionDigits\n                      }\n                    }\n                  }\n                }\n              }\n              taxBehavior\n            }\n            media {\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.ProductDetailDocument,
};
const documents: Documents = {
    "\n  fragment ProductGridTile on Product {\n    id\n    name\n    slug\n    heroVariant {\n      image {\n        src\n      }\n    }\n    priceRange {\n      minPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n        discountedPrice {\n          value {\n            centAmount\n            fractionDigits\n            currencyCode\n          }\n          discount {\n            value {\n              ... on ProductDiscountRelativeValue {\n                factor\n              }\n              ... on ProductDiscountAbsoluteValue {\n                value {\n                  centAmount\n                  currencyCode\n                  fractionDigits\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ProductGridTileFragmentDoc,
    "\n  fragment CartLineItem on CartLineItem {\n    id\n    ...EditItemQuantityButton\n    taxBehavior\n    variantName\n    productName\n    quantity\n    productSlug\n    variant {\n      image {\n        src\n      }\n      selectedAttributes {\n        value\n      }\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n    unitPrice {\n      value {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      discountedPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n    }\n    discountApplications {\n      edges {\n        node {\n          label\n          discountedAmount {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n      }\n    }\n    total {\n      centAmount\n      currencyCode\n      fractionDigits\n    }\n  }\n": types.CartLineItemFragmentDoc,
    "\n  fragment EditItemQuantityButton on CartLineItem {\n    id\n    quantity\n    variant {\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n  }\n": types.EditItemQuantityButtonFragmentDoc,
    "\n  mutation CartCreate($input: CartCreateInput!) {\n    cartCreate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CartCreateDocument,
    "\n  mutation CartUpdate($input: CartUpdateInput!) {\n    cartUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CartUpdateDocument,
    "\n  mutation CartReplicate($input: CartReplicateInput!) {\n    cartReplicate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CartReplicateDocument,
    "\n  mutation CartDiscountCodeAdd($input: CartDiscountCodeAddInput!) {\n    cartDiscountCodeAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        code: __typename\n      }\n    }\n  }\n": types.CartDiscountCodeAddDocument,
    "\n  mutation CartDiscountCodeRemove($input: CartDiscountCodeRemoveInput!) {\n    cartDiscountCodeRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CartDiscountCodeRemoveDocument,
    "\n  mutation CartLineItemsUpdate($input: CartLineItemsUpdateInput!) {\n    cartLineItemsUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CartLineItemsUpdateDocument,
    "\n  mutation CartLineItemsRemove($input: CartLineItemsRemoveInput!) {\n    cartLineItemsRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CartLineItemsRemoveDocument,
    "\n  query NavbarCart($id: ID!) {\n    cart(id: $id) {\n      id\n      lineItemsQuantity\n      state\n      currency\n      customerId\n      channel {\n        id\n      }\n    }\n  }\n": types.NavbarCartDocument,
    "\n  query CartDetails($id: ID!) {\n    cart(id: $id) {\n      id\n      customerId\n      shippingAddress {\n        countryCode\n      }\n      lineItemsQuantity\n      lineItems(first: 100) {\n        edges {\n          node {\n            id\n            ...CartLineItem\n\n            discountApplications {\n              edges {\n                node {\n                  discountedAmount {\n                    centAmount\n                    currencyCode\n                    fractionDigits\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      discountCodes {\n        code\n      }\n      subtotal {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      taxedPrice {\n        tax {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n      total {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n    }\n  }\n": types.CartDetailsDocument,
    "\n  query CartCustomerDetails {\n    customer {\n      id\n      customerGroups {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.CartCustomerDetailsDocument,
    "\n  query CategoryGrid(\n    $slug: String!\n    $currency: String!\n    $channelId: ID!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductCategorySortKeys!\n  ) {\n    category(slug: $slug, currency: $currency, channelId: $channelId) {\n      products(\n        first: 15\n        after: $after\n        sortDirection: $sortDirection\n        sortKey: $sortKey\n      ) {\n        edges {\n          node {\n            id\n            ...ProductGridTile\n          }\n        }\n      }\n    }\n  }\n": types.CategoryGridDocument,
    "\n  mutation CartLineItemsAdd($input: CartLineItemsAddInput!) {\n    cartLineItemsAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        __typename\n      }\n    }\n  }\n": types.CartLineItemsAddDocument,
    "\n  query ProductsGrid(\n    $channelId: ID!\n    $currency: String!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductSortKeys!\n  ) {\n    products(\n      first: 15\n      after: $after\n      sortDirection: $sortDirection\n      sortKey: $sortKey\n      channelId: $channelId\n      currency: $currency\n    ) {\n      edges {\n        node {\n          id\n          ...ProductGridTile\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.ProductsGridDocument,
    "\n  query ProductDetail($slug: String, $currency: String!, $channelId: ID!) {\n    product(slug: $slug, channelId: $channelId, currency: $currency) {\n      id\n      name\n      description\n      attributeAssignments {\n        name\n        attribute {\n          type\n        }\n        values {\n          edges {\n            node {\n              value\n              ... on SwatchAttributeValue {\n                media {\n                  src\n                }\n                color\n              }\n            }\n          }\n        }\n      }\n      variants(first: 100) {\n        edges {\n          node {\n            id\n            sku\n            selectedAttributes {\n              name\n              value\n            }\n            availability {\n              availableForPurchase\n              availableQuantity\n              stockPolicy\n            }\n            price {\n              value {\n                centAmount\n                currencyCode\n                fractionDigits\n              }\n              discountedPrice {\n                value {\n                  centAmount\n                  fractionDigits\n                  currencyCode\n                }\n                discount {\n                  value {\n                    __typename\n                    ... on ProductDiscountRelativeValue {\n                      factor\n                    }\n                    ... on ProductDiscountAbsoluteValue {\n                      value {\n                        centAmount\n                        currencyCode\n                        fractionDigits\n                      }\n                    }\n                  }\n                }\n              }\n              taxBehavior\n            }\n            media {\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ProductDetailDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ProductGridTile on Product {\n    id\n    name\n    slug\n    heroVariant {\n      image {\n        src\n      }\n    }\n    priceRange {\n      minPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n        discountedPrice {\n          value {\n            centAmount\n            fractionDigits\n            currencyCode\n          }\n          discount {\n            value {\n              ... on ProductDiscountRelativeValue {\n                factor\n              }\n              ... on ProductDiscountAbsoluteValue {\n                value {\n                  centAmount\n                  currencyCode\n                  fractionDigits\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductGridTile on Product {\n    id\n    name\n    slug\n    heroVariant {\n      image {\n        src\n      }\n    }\n    priceRange {\n      minPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n        discountedPrice {\n          value {\n            centAmount\n            fractionDigits\n            currencyCode\n          }\n          discount {\n            value {\n              ... on ProductDiscountRelativeValue {\n                factor\n              }\n              ... on ProductDiscountAbsoluteValue {\n                value {\n                  centAmount\n                  currencyCode\n                  fractionDigits\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CartLineItem on CartLineItem {\n    id\n    ...EditItemQuantityButton\n    taxBehavior\n    variantName\n    productName\n    quantity\n    productSlug\n    variant {\n      image {\n        src\n      }\n      selectedAttributes {\n        value\n      }\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n    unitPrice {\n      value {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      discountedPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n    }\n    discountApplications {\n      edges {\n        node {\n          label\n          discountedAmount {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n      }\n    }\n    total {\n      centAmount\n      currencyCode\n      fractionDigits\n    }\n  }\n"): (typeof documents)["\n  fragment CartLineItem on CartLineItem {\n    id\n    ...EditItemQuantityButton\n    taxBehavior\n    variantName\n    productName\n    quantity\n    productSlug\n    variant {\n      image {\n        src\n      }\n      selectedAttributes {\n        value\n      }\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n    unitPrice {\n      value {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      discountedPrice {\n        value {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n    }\n    discountApplications {\n      edges {\n        node {\n          label\n          discountedAmount {\n            centAmount\n            currencyCode\n            fractionDigits\n          }\n        }\n      }\n    }\n    total {\n      centAmount\n      currencyCode\n      fractionDigits\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment EditItemQuantityButton on CartLineItem {\n    id\n    quantity\n    variant {\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment EditItemQuantityButton on CartLineItem {\n    id\n    quantity\n    variant {\n      availability {\n        availableForPurchase\n        availableQuantity\n        stockPolicy\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartCreate($input: CartCreateInput!) {\n    cartCreate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartCreate($input: CartCreateInput!) {\n    cartCreate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartUpdate($input: CartUpdateInput!) {\n    cartUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartUpdate($input: CartUpdateInput!) {\n    cartUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartReplicate($input: CartReplicateInput!) {\n    cartReplicate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartReplicate($input: CartReplicateInput!) {\n    cartReplicate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartDiscountCodeAdd($input: CartDiscountCodeAddInput!) {\n    cartDiscountCodeAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        code: __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartDiscountCodeAdd($input: CartDiscountCodeAddInput!) {\n    cartDiscountCodeAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        code: __typename\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartDiscountCodeRemove($input: CartDiscountCodeRemoveInput!) {\n    cartDiscountCodeRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartDiscountCodeRemove($input: CartDiscountCodeRemoveInput!) {\n    cartDiscountCodeRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartLineItemsUpdate($input: CartLineItemsUpdateInput!) {\n    cartLineItemsUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartLineItemsUpdate($input: CartLineItemsUpdateInput!) {\n    cartLineItemsUpdate(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartLineItemsRemove($input: CartLineItemsRemoveInput!) {\n    cartLineItemsRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartLineItemsRemove($input: CartLineItemsRemoveInput!) {\n    cartLineItemsRemove(input: $input) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NavbarCart($id: ID!) {\n    cart(id: $id) {\n      id\n      lineItemsQuantity\n      state\n      currency\n      customerId\n      channel {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query NavbarCart($id: ID!) {\n    cart(id: $id) {\n      id\n      lineItemsQuantity\n      state\n      currency\n      customerId\n      channel {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CartDetails($id: ID!) {\n    cart(id: $id) {\n      id\n      customerId\n      shippingAddress {\n        countryCode\n      }\n      lineItemsQuantity\n      lineItems(first: 100) {\n        edges {\n          node {\n            id\n            ...CartLineItem\n\n            discountApplications {\n              edges {\n                node {\n                  discountedAmount {\n                    centAmount\n                    currencyCode\n                    fractionDigits\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      discountCodes {\n        code\n      }\n      subtotal {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      taxedPrice {\n        tax {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n      total {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n    }\n  }\n"): (typeof documents)["\n  query CartDetails($id: ID!) {\n    cart(id: $id) {\n      id\n      customerId\n      shippingAddress {\n        countryCode\n      }\n      lineItemsQuantity\n      lineItems(first: 100) {\n        edges {\n          node {\n            id\n            ...CartLineItem\n\n            discountApplications {\n              edges {\n                node {\n                  discountedAmount {\n                    centAmount\n                    currencyCode\n                    fractionDigits\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      discountCodes {\n        code\n      }\n      subtotal {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n      taxedPrice {\n        tax {\n          centAmount\n          currencyCode\n          fractionDigits\n        }\n      }\n      total {\n        centAmount\n        currencyCode\n        fractionDigits\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CartCustomerDetails {\n    customer {\n      id\n      customerGroups {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CartCustomerDetails {\n    customer {\n      id\n      customerGroups {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CategoryGrid(\n    $slug: String!\n    $currency: String!\n    $channelId: ID!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductCategorySortKeys!\n  ) {\n    category(slug: $slug, currency: $currency, channelId: $channelId) {\n      products(\n        first: 15\n        after: $after\n        sortDirection: $sortDirection\n        sortKey: $sortKey\n      ) {\n        edges {\n          node {\n            id\n            ...ProductGridTile\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryGrid(\n    $slug: String!\n    $currency: String!\n    $channelId: ID!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductCategorySortKeys!\n  ) {\n    category(slug: $slug, currency: $currency, channelId: $channelId) {\n      products(\n        first: 15\n        after: $after\n        sortDirection: $sortDirection\n        sortKey: $sortKey\n      ) {\n        edges {\n          node {\n            id\n            ...ProductGridTile\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CartLineItemsAdd($input: CartLineItemsAddInput!) {\n    cartLineItemsAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CartLineItemsAdd($input: CartLineItemsAddInput!) {\n    cartLineItemsAdd(input: $input) {\n      cart {\n        id\n      }\n      errors {\n        __typename\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductsGrid(\n    $channelId: ID!\n    $currency: String!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductSortKeys!\n  ) {\n    products(\n      first: 15\n      after: $after\n      sortDirection: $sortDirection\n      sortKey: $sortKey\n      channelId: $channelId\n      currency: $currency\n    ) {\n      edges {\n        node {\n          id\n          ...ProductGridTile\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductsGrid(\n    $channelId: ID!\n    $currency: String!\n    $after: String\n    $sortDirection: SortDirection!\n    $sortKey: ProductSortKeys!\n  ) {\n    products(\n      first: 15\n      after: $after\n      sortDirection: $sortDirection\n      sortKey: $sortKey\n      channelId: $channelId\n      currency: $currency\n    ) {\n      edges {\n        node {\n          id\n          ...ProductGridTile\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductDetail($slug: String, $currency: String!, $channelId: ID!) {\n    product(slug: $slug, channelId: $channelId, currency: $currency) {\n      id\n      name\n      description\n      attributeAssignments {\n        name\n        attribute {\n          type\n        }\n        values {\n          edges {\n            node {\n              value\n              ... on SwatchAttributeValue {\n                media {\n                  src\n                }\n                color\n              }\n            }\n          }\n        }\n      }\n      variants(first: 100) {\n        edges {\n          node {\n            id\n            sku\n            selectedAttributes {\n              name\n              value\n            }\n            availability {\n              availableForPurchase\n              availableQuantity\n              stockPolicy\n            }\n            price {\n              value {\n                centAmount\n                currencyCode\n                fractionDigits\n              }\n              discountedPrice {\n                value {\n                  centAmount\n                  fractionDigits\n                  currencyCode\n                }\n                discount {\n                  value {\n                    __typename\n                    ... on ProductDiscountRelativeValue {\n                      factor\n                    }\n                    ... on ProductDiscountAbsoluteValue {\n                      value {\n                        centAmount\n                        currencyCode\n                        fractionDigits\n                      }\n                    }\n                  }\n                }\n              }\n              taxBehavior\n            }\n            media {\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductDetail($slug: String, $currency: String!, $channelId: ID!) {\n    product(slug: $slug, channelId: $channelId, currency: $currency) {\n      id\n      name\n      description\n      attributeAssignments {\n        name\n        attribute {\n          type\n        }\n        values {\n          edges {\n            node {\n              value\n              ... on SwatchAttributeValue {\n                media {\n                  src\n                }\n                color\n              }\n            }\n          }\n        }\n      }\n      variants(first: 100) {\n        edges {\n          node {\n            id\n            sku\n            selectedAttributes {\n              name\n              value\n            }\n            availability {\n              availableForPurchase\n              availableQuantity\n              stockPolicy\n            }\n            price {\n              value {\n                centAmount\n                currencyCode\n                fractionDigits\n              }\n              discountedPrice {\n                value {\n                  centAmount\n                  fractionDigits\n                  currencyCode\n                }\n                discount {\n                  value {\n                    __typename\n                    ... on ProductDiscountRelativeValue {\n                      factor\n                    }\n                    ... on ProductDiscountAbsoluteValue {\n                      value {\n                        centAmount\n                        currencyCode\n                        fractionDigits\n                      }\n                    }\n                  }\n                }\n              }\n              taxBehavior\n            }\n            media {\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;